% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/projection_helpers.R
\name{residualize_matrix_on_subspace}
\alias{residualize_matrix_on_subspace}
\title{Residualize Matrix on Subspace}
\usage{
residualize_matrix_on_subspace(matrix_to_residualize, subspace_basis_matrix)
}
\arguments{
\item{matrix_to_residualize}{A numeric matrix (e.g., `C x k`) whose rows
are to be residualized. If sparse (from `Matrix` package), will be coerced to dense.
A warning is issued if the matrix is very large (`C*k > 1e7`).}

\item{subspace_basis_matrix}{A numeric matrix (e.g., `m x k`) whose rows
span the subspace to project out. If sparse, will be coerced to dense.}
}
\value{
A numeric matrix with the same dimensions as `matrix_to_residualize`,
  containing the residualized rows.
}
\description{
Residualizes the rows of `matrix_to_residualize` with respect to
  the row space of `subspace_basis_matrix`. When `matrix_to_residualize` has
  more columns than rows the function operates directly on the matrix without
  transposing, residualizing columns instead to reduce memory pressure. In the
  usual case it projects each column of `t(matrix_to_residualize)` onto the
  column space of `t(subspace_basis_matrix)` and takes the residuals.
}
\examples{
# Z_i: 3 conditions, 5-dimensional spectral space (3x5)
Z_i <- matrix(rnorm(15), nrow = 3, ncol = 5)
# A_parc_i: 2 anchor parcels, 5-dimensional spectral space (2x5)
A_parc_i <- matrix(rnorm(10), nrow = 2, ncol = 5)
Z_i_res <- residualize_matrix_on_subspace(Z_i, A_parc_i)
print(dim(Z_i_res))
if (nrow(A_parc_i) > 0 && ncol(A_parc_i) > 0 && qr(t(A_parc_i))$rank > 0) {
  # Test orthogonality: Z_i_res \%*\% t(A_parc_i) should be near zero
  print(round(Z_i_res \%*\% t(A_parc_i), 10))
}

}
